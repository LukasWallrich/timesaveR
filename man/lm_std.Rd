% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat_tests.R
\name{lm_std}
\alias{lm_std}
\title{lm() with standardised continuous variables}
\usage{
lm_std(formula, data = NULL, weights = NULL, rename_std = FALSE, ...)
}
\arguments{
\item{formula}{an object of class \code{"\link[stats]{formula}"} (or one that
    can be coerced to that class): a symbolic description of the
    model to be fitted.  The details of model specification are given
    under \sQuote{Details}.}

\item{data}{an optional data frame, list or environment (or object
    coercible by \code{\link{as.data.frame}} to a data frame) containing
    the variables in the model.  If not found in \code{data}, the
    variables are taken from \code{environment(formula)},
    typically the environment from which \code{lm} is called.}

\item{weights}{an optional vector of weights to be used in the fitting
    process.  Should be \code{NULL} or a numeric vector.
    If non-NULL, weighted least squares is used with weights
    \code{weights} (that is, minimizing \code{sum(w*e^2)}); otherwise
    ordinary least squares is used.  See also \sQuote{Details},}

\item{rename_std}{Logical. Should standardised variables be indicated by _sd
suffix}

\item{...}{
  Arguments passed on to \code{\link[stats:lm]{stats::lm}}
  \describe{
    \item{\code{subset}}{an optional vector specifying a subset of observations
    to be used in the fitting process.}
    \item{\code{na.action}}{a function which indicates what should happen
    when the data contain \code{NA}s.  The default is set by
    the \code{na.action} setting of \code{\link{options}}, and is
    \code{\link[stats]{na.fail}} if that is unset.  The \sQuote{factory-fresh}
    default is \code{\link[stats]{na.omit}}.  Another possible value is
    \code{NULL}, no action.  Value \code{\link[stats]{na.exclude}} can be useful.}
    \item{\code{method}}{the method to be used; for fitting, currently only
    \code{method = "qr"} is supported; \code{method = "model.frame"} returns
    the model frame (the same as with \code{model = TRUE}, see below).}
    \item{\code{model}}{logicals.  If \code{TRUE} the corresponding
    components of the fit (the model frame, the model matrix, the
    response, the QR decomposition) are returned.
  }
    \item{\code{x}}{logicals.  If \code{TRUE} the corresponding
    components of the fit (the model frame, the model matrix, the
    response, the QR decomposition) are returned.
  }
    \item{\code{y}}{logicals.  If \code{TRUE} the corresponding
    components of the fit (the model frame, the model matrix, the
    response, the QR decomposition) are returned.
  }
    \item{\code{qr}}{logicals.  If \code{TRUE} the corresponding
    components of the fit (the model frame, the model matrix, the
    response, the QR decomposition) are returned.
  }
    \item{\code{singular.ok}}{logical. If \code{FALSE} (the default in S but
    not in \R) a singular fit is an error.}
    \item{\code{contrasts}}{an optional list. See the \code{contrasts.arg}
    of \code{\link[stats]{model.matrix.default}}.}
    \item{\code{offset}}{this can be used to specify an \emph{a priori} known
    component to be included in the linear predictor during fitting.
    This should be \code{NULL} or a numeric vector or matrix of extents
    matching those of the response.  One or more \code{\link[stats]{offset}} terms can be
    included in the formula instead or as well, and if more than one are
    specified their sum is used.  See \code{\link[stats]{model.offset}}.}
  }}
}
\description{
This runs lm() after standardising all continuous variables, while leaving
factors intact.
}
\details{
In the model call, the weights variable will always be called weights. This might
pose a problem when you update the model later on, for  the moment the only workaround
is to rename the weights variable accordingly (or to fix it and contribute a PR on
Github).
}
\references{
See (Fox, 2015) for an argument why dummy variables should never
be standardised. If you want to run a model with all variables standardised,
one option is `QuantPsyc::lm.beta()`
}
