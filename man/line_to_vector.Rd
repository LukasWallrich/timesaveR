% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/misc.R
\name{line_to_vector}
\alias{line_to_vector}
\title{Turn line of items separated by whitespace into vector or code for c()}
\usage{
line_to_vector(
  x = readLines("clipboard"),
  strings = TRUE,
  separators = c("top-level", "all"),
  to_clip = interactive(),
  return = c("code", "vector")
)
}
\arguments{
\item{x}{Character string of desired vector items, separated by spaces, tabs or linebreaks. If NULL, it will be read from the clipboard.}

\item{strings}{Should vector items be considered as strings, i.e. quoted.}

\item{separators}{Which separator should x be split by. This defaults to the "top-level" found in x, i.e., newlines, if there are any, and otherwise tabs or spaces. Can also be "all".}

\item{to_clip}{Should code for vector be copied into clipboard? Defaults to TRUE in interactive use, but only works when \code{clipr} package is installed}

\item{return}{Should code or a vector be returned? Defaults to code}
}
\description{
This takes a line of items separated by spaces, tabs or newlines and returns a c()
vector command - with the items quoted or not - or a vector created by that command. By default, the line
is read from the clipboard and a character vector returned, and only the highest-level
separator present in x is used to split. Note that this makes it possible to copy values
in most spreadsheet programs such as Excel and use this function to pull them
from the clipboard and turn them into code that creates a vector.
}
\details{
If x is not split by spaces, stringr::str_trim() is used to trim whitespace from the start 
and end of each element of the vector.
}
\examples{
line_to_vector("a b c", strings = TRUE)

line_to_vector("1 2 3", st = FALSE, return = "vector")

line_to_vector("Hello World!
                How are the bananas today?
                Thanks for being here.")

weekend <- line_to_vector("Friday Saturday Sunday", return = "vector")
  
}
