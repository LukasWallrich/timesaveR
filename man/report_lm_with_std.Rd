% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lm_tables.R
\name{report_lm_with_std}
\alias{report_lm_with_std}
\title{Create a summary table comparing standardised and non-standardised linear models}
\usage{
report_lm_with_std(
  mod,
  mod_std,
  conf_level = 0.95,
  coef_renames = NULL,
  fmt = "\%.2f",
  statistic_vertical = FALSE,
  filename = NULL,
  model_names = NULL,
  show_nimp = FALSE,
  R2_change = FALSE,
  notes = list(NULL),
  apa_style = TRUE,
  stars = std_stars_pad,
  ...
)
}
\arguments{
\item{mod}{A lm-model/mira object of lm models, with variables not standardised (or a list of such models)}

\item{mod_std}{A lm-model/mira object of lm models, with standardised variables. Can be
created with \code{\link{lm_std}} (or a list of such models)}

\item{conf_level}{Confidence level to use for confidence intervals, defaults to .95}

\item{coef_renames}{A named character vector with new names for the coefficients or a tibble as provided by \code{\link{get_coef_rename_tribble}}
for variables. If NULL, then the coefficients are not renamed.}

\item{fmt}{determines how to format numeric values
\itemize{
  \item integer: the number of digits to keep after the period `format(round(x, fmt), nsmall=fmt)`
  \item character: passed to the `sprintf` function (e.g., '\%.3f' keeps 3 digits with trailing zero). See `?sprintf`
  \item function: returns a formatted character string.
}}

\item{statistic_vertical}{Should standard errors and CIs be shown below coefficients? Defaults to horizontal layout}

\item{filename}{the file name to create a HTML file on disk.}

\item{model_names}{If several pairs of models are to be plotted side by side, indicate the label for each *pair* here}

\item{show_nimp}{Logical. If mira objects are passed, this determines whether the number of imputations will be reported as a model statistic}

\item{R2_change}{Logical. Report R2 change and F-test to compare models. Only implemented for comparing two pairs of models.}

\item{notes}{List of notes to append to bottom of table. An explanation of significance stars is automatically added. If the std models were run with a helper function in this package, a note regarding the standardisation is also automatically added.}

\item{apa_style}{Logical, should APA-style formatting be applied}

\item{stars}{Named vector of significance stars and their thresholds, check `rNuggets:::std_stars_pad` for default.}

\item{...}{
  Arguments passed on to \code{\link[modelsummary:modelsummary]{modelsummary::modelsummary}}
  \describe{
    \item{\code{coef_map}}{named character vector. Values refer to the variable names
that will appear in the table. Names refer to the original term names stored
in the model object, e.g. c("hp:mpg"="hp X mpg") for an interaction term.
Coefficients that are omitted from this vector will be omitted from the
table. The table will be ordered in the same order as this vector.}
    \item{\code{coef_omit}}{string regular expression. Omits all matching coefficients
from the table using `grepl(perl=TRUE)`.}
    \item{\code{coef_rename}}{named character vector. Values refer to the variable names
that will appear in the table. Names refer to the original term names stored
in the model object, e.g. c("hp:mpg"="hp X mpg") for an interaction term.}
  }}
}
\value{
A list with `gt_tab` (the gt-table object including the parts of the table
that can be created with gt. This can be post-processed and formatted with functions in
the gt-package, but does not include the lower part with model statistics, e.g., R^2.) and
`html_code` (the code that creates the full table, and is used to render it in
the Viewer).
}
\description{
This function creates a summary table for lm models (including mice::mira objects
containing lm-models) that shows a standardised and non-standardised version of the model
side-by-side. Several pairs of such models can be compared side-by-side.
}
\examples{

# Standard lm model
mod1 <- lm(mpg ~ hp + wt, mtcars)

# Model with standardised coefficients

mod2 <- lm_std(mpg ~ hp + wt, mtcars)

report_lm_with_std(mod1, mod2)
}
