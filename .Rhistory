col_labels <- rep(list(gt::md("*<center>B (SE)</center>*"), gt::md("*<center>&beta; [95% CI]</center>*")), times = length(mod)) %>% stats::setNames(names(mods))
if ("rN_std" %in% class(std_mod[[1]]) | ("mira" %in% class(std_mod[[1]]) & "rN_std" %in% class(std_mod[[1]]$analyses[[1]]))) {
notes %<>% c("Given that dummy variables lose their interpretability when standardised (Fox, 2015), &beta; for dummy variables are semi-standardised, indicating the impact of that dummy on the standardised outcome variable.")
}
notes %<>% c(.make_stars_note())
notes <- Filter(Negate(is.null), notes)
if (statistic_vertical) {
tab <- modelsummary::msummary(mods, output = "gt", vcov = stat_list, rep(c(
"{estimate} {stars}", "{estimate}"), length(mod)), fmt = fmt, gof_omit = ".*", stars = stars, ...) %>%
gt::fmt_markdown(columns = dplyr::everything()) %>%
gt::cols_label(.list = col_labels) %>%
gt::cols_align("right", dplyr::everything()) %>%
gt::cols_align("left", columns = 1) %>%
gt:::dt_source_notes_set("") #Remove std star note
} else {
tab <- modelsummary::msummary(mods, output = "gt", statistic = NULL, estimate = rep(c(
"{estimate} ({std.error}){stars}",
"{estimate} [{conf.low}, {conf.high}]"), length(mod)), fmt = fmt, gof_omit = ".*", stars = stars,...) %>%
gt::fmt_markdown(columns = dplyr::everything()) %>%
gt::cols_label(.list = col_labels) %>%
gt::cols_align("right", dplyr::everything()) %>%
gt::cols_align("left", columns = 1) %>%
gt:::dt_source_notes_set("") #Remove std star note
}
if (apa_style) tab <- tab %>% gt_apa_style()
for (i in seq_along(notes)) {
tab <- tab %>% gt::tab_source_note(gt::md(notes[[i]]))
}
if (length(mod) > 1) {
if (is.null(model_names)) model_names <- paste0("Model", seq_len(length(mod)))
for (i in seq_len(length(mod))) {
tab <- tab %>% gt::tab_spanner(gt::md(paste0("**", model_names[i], "**")), columns = (2 * i):(2 * i + 1))
}
}
code <- character()
row <- '<tr style="border-top-style: solid; border-top-width: 2px;">
<td class="gt_row gt_left" rowspan="1" colspan="1">  <em>N     </td>'
sums <- paste(purrr::map(gof, function(x) {
glue::glue('<td class="gt_row gt_center" rowspan="1" colspan="2"> {x$value[x$term=="*N*"]}   </td>')
}), collapse = " ")
code %<>% paste(row, sums, "</tr>", collapse = "")
row <- '<tr>
<td class="gt_row gt_left" rowspan="1" colspan="1">  <em>R<sup>2</sup>     </td>'
sums <- paste(purrr::map(gof, function(x) {
glue::glue('<td class="gt_row gt_center" rowspan="1" colspan="2"> {fmt_cor(as.numeric(x$value[x$term=="R<sup>2</sup>"]))}   </td>')
}), collapse = " ")
code %<>% paste(row, sums, "</tr>", collapse = "")
Fs <- purrr::map(mod, .lm_F_test)
row <- '<tr>
<td class="gt_row gt_left" rowspan="1" colspan="1"><em>F</em>-tests</td>'
sums <- paste(purrr::map(Fs, function(x) {
glue::glue('<td class="gt_row gt_center" rowspan="1" colspan="2"> {gt:::md_to_html(x)}   </td>')
}), collapse = " ")
code %<>% paste(row, sums, "</tr>", collapse = "")
if (R2_change == TRUE) {
delta_R2 <- purrr::map_chr(gof, function(x) x %>% dplyr::filter(.data$term == "R<sup>2</sup>") %>% dplyr::pull(.data$value)) %>% as.numeric() %>% diff() %>% fmt_cor()
x <- stats::anova(mod[[1]], mod[[2]])
F_test <- glue_warn("<em>F</em>({x$Df[2]}, {x$Res.Df[2]}) = {x$F[2] %>% round_(2)}, <em>p</em> {x$`Pr(>F)`[2] %>% fmt_p()}")
row <- glue_warn('<tr>
<td class="gt_row gt_left" rowspan="1" colspan="1"><em>Change</em></td>
<td class="gt_row gt_center" rowspan="1" colspan="4">&Delta;<em>R</em><sup>2</sup> =
{delta_R2}, {F_test} </td></tr>')
code %<>% paste(row, collapse = "")
}
temp_file <- tempfile()
tab %>%
htmltools::as.tags() %>%
htmltools::save_html(temp_file)
code <- readr::read_file(temp_file) %>% stringr::str_replace("</tbody>", paste(code, "</tbody>"))
browser()
code %<>% stringr::str_replace_all(c("\\u03b2" = "&beta;", "â€ " = "&dagger;"))
out <- list(gt_tab = tab, html_code = code)
class(out) <- c("timesaveR_raw_html", class(out))
if (!is.null(filename)) {
readr::write_file(code, filename)
return(invisible(out))
}
out
}
ess_health$gndr <- factor(ess_health$gndr)
#Standard lm model
mod1 <- lm(depression ~ agea + gndr + health + cntry, ess_health)
#Model with standardised coefficients
mod2 <- lm_std(depression ~ agea + gndr + health + cntry, ess_health)
report_lm_with_std(mod1, mod2)
code %>% clipr::write_clip()
x[[2]]
x[[2]] %>% clipr::write_clip()
print.timesaveR_raw_html(x[2])
devtools::load_all(".")
rm(list = c("report_lm_with_std"))
ess_health$gndr <- factor(ess_health$gndr)
#Standard lm model
mod1 <- lm(depression ~ agea + gndr + health + cntry, ess_health)
#Model with standardised coefficients
mod2 <- lm_std(depression ~ agea + gndr + health + cntry, ess_health)
report_lm_with_std(mod1, mod2)
devtools::load_all(".")
ess_health$gndr <- factor(ess_health$gndr)
#Standard lm model
mod1 <- lm(depression ~ agea + gndr + health + cntry, ess_health)
#Model with standardised coefficients
mod2 <- lm_std(depression ~ agea + gndr + health + cntry, ess_health)
report_lm_with_std(mod1, mod2)
?report_lm_with_std
x %>% names()
mod <- lm(mpg ~ wt, mtcars)
coef(mod)
coef("jhi")
coef(1)
?tryCatch
?try
coefs <- try(coef(1), silent = TRUE)
class(coefs)
stringr::str_replace("hellO_u_2" , "_", " ")
stringr::str_replace_all("hellO_u_2" , "_", " ")
devtools::load_all(".")
get_coef_rename_tribble(mod)
get_coef_rename_tribble(mod)
to_tribble <- function(x, show = FALSE) {
assert_data_frame(x)
no_cols <- ncol(x)
x %<>% dplyr::mutate_if(is.factor, as.character)
x %<>% dplyr::mutate_if(is.character, function(x) paste0('"', x, '"'))
lengths <- pmax(
purrr::map_int(x, ~ max(nchar(.x, keepNA = FALSE))),
purrr::map_int(names(x), ~ nchar(.x))
)
if (sum(lengths) + no_cols * 3 > 80) message("Some entries are too long for the tibble code to be well formatted")
vars <- names(x)
code <- "tibble::tribble(
"
for (i in seq_len(length(vars))) {
code <- glue::glue("{code}~{vars[i]}, {paste0(collapse = '', '', rep(' ', lengths[i] - nchar(vars[i])))}")
}
for (j in seq_len(nrow(x))) {
code %<>% paste0("\n  ")
for (i in seq_len(length(vars))) {
browser()
code <- glue::glue("{code} {x[j, i]}, {paste0(collapse = '', '',rep(' ',  lengths[i] - nchar(x[j, i], keepNA = FALSE)))}")
}
}
code %<>% stringr::str_replace_all('"NA"', "NA")
code %<>% stringr::str_trim() %>%
substr(1, nchar(.) - 1) %>%
paste0("\n)\n")
if (show) {
cat(code)
return(invisible(code))
}
code
}
get_coef_rename_tribble(mod)
trace(to_tribble, edit = T)
rm('to_tribble')
trace(to_tribble, edit = T)
get_coef_rename_tribble(mod)
traceback()
trace(to_tribble, edit = T)
get_coef_rename_tribble(mod)
devtools::load_all(".")
mod <- lm(mpg ~ wt, mtcars)
get_coef_rename_tribble(mod)
trace(to_tribble, edit = T)
get_coef_rename_tribble(mod)
trace(get_coef_rename_tribble, edit = T)
get_coef_rename_tribble(mod)
tibble::tibble(old = coefs, new = coefs %>% stringr::str_replace_all("_", " ") %>% stringr::str_to_title())
tibble::tibble(old = coefs, new = coefs %>% stringr::str_replace_all("_", " ") %>% stringr::str_to_title()) -> x
x <<- x
to_tribblex
to_tribble(x)
code
to_tribble(x)
x
lengths <- pmax(
purrr::map_int(x, ~ max(nchar(.x, keepNA = FALSE))),
purrr::map_int(names(x), ~ nchar(.x))
)
purrr::map_int(x, ~ max(nchar(.x, keepNA = FALSE)))
purrr::map_int(names(x), ~ nchar(.x))
purrr::map(mtcars, names)
x
purrr::map(x, nchar)
to_tribble(x)
x[,1]
nchar(x[,1])
nchar(x[1,1])
x[1,1]
devtools::load_all(".")
to_tribble(x)
to_tribble
trace(to_tribble, edit = T)
to_tribble(x)
nchar(x[1,1])
nchar(x[[1,1]])
x <- data.frame(x)
nchar(x[1,1])
nchar(x[[1,1]])
devtools::load_all(".")
untrace(to_tribble)
to_tribble(x)
to_tribble(x, show = T)
get_coef_rename_tribble <- function(mod, show = TRUE) {
coefs <- try(coef(mod), silent = TRUE)
if(class(coefs) == "try-error") stop("coef() could not extract coefficients from mod argument.")
coefs <- names(coefs)
assert_logical(show)
tibble::tibble(old = coefs, new = coefs %>% stringr::str_replace_all("_", " ") %>% stringr::str_to_title()) %>% to_tribble(show = show)
}
get_coef_rename_tribble()
mod <- lm(mpg ~ wt, mtcars)
get_coef_rename_tribble(mod )
devtools::load_all(".")
rm(list = c("get_coef_rename_tribble"))
ess_health$gndr <- factor(ess_health$gndr)
#Standard lm model
mod1 <- lm(depression ~ agea + gndr + health + cntry, ess_health)
#Model with standardised coefficients
mod2 <- lm_std(depression ~ agea + gndr + health + cntry, ess_health)
report_lm_with_std(mod1, mod2)
scales <- list(
depression = c("fltdpr", "flteeff", "slprl", "wrhpp", "fltlnl",
"enjlf", "fltsd", "cldgng"),
healthy_eating = c("etfruit", "eatveg")
)
scales_reverse <- list(
depression = c("wrhpp", "enjlf"),
healthy_eating = c("etfruit", "eatveg")
)
scales <- make_scales(ess_health, items = scales, reversed = scales_reverse)
#Check descriptives, including reliability
scales$descriptives
#Add scale scores to dataset
ess_health <- cbind(ess_health, scales$scores)
ess_health$gndr <- factor(ess_health$gndr)
#Standard lm model
mod1 <- lm(depression ~ agea + gndr + health + cntry, ess_health)
#Model with standardised coefficients
mod2 <- lm_std(depression ~ agea + gndr + health + cntry, ess_health)
report_lm_with_std(mod1, mod2)
get_coef_rename_tribble(mod1)
coef_names <- tibble::tribble(
~old,           ~new,
"(Intercept)",  "(Intercept)",
"agea",         "Age",
"gndr2",        "Gender (??)",
"health",       "Poor health",
"cntryFR",      "Cntryfr",
"cntryGB",      "Cntrygb"
)
report_lm_with_std(mod1, mod2, coef_renames = coef_names)
coef_renames
coef_names
trace(report_lm_with_std, edit = T)
coef_names <- tibble::tribble(
~old,           ~new,
"(Intercept)",  "(Intercept)",
"agea",         "Age",
"gndr2",        "Gender (??)",
"health",       "Poor health",
"cntryFR",      "Cntryfr",
"cntryGB",      "Cntrygb"
)
report_lm_with_std(mod1, mod2, coef_renames = coef_names)
coef_renames
x <- coef_renames
coef_renames <- names(x)
names(coef_renames) <- x
coef_renames
trace(report_lm_with_std, edit = T)
coef_renames <- coef_names$new %>% magrittr::set_names(coef_names$old)
modelsummary::msummary(mod1, coef_rename = coef_renames)
trace(report_lm_with_std, edit = T)
coef_names <- tibble::tribble(
~old,           ~new,
"(Intercept)",  "(Intercept)",
"agea",         "Age",
"gndr2",        "Gender (??)",
"health",       "Poor health",
"cntryFR",      "Cntryfr",
"cntryGB",      "Cntrygb"
)
report_lm_with_std(mod1, mod2, coef_renames = coef_names)
report_lm_with_std <- function(mod, std_mod, conf_level = .95, coef_renames = NULL, fmt = "%.2f", statistic_vertical = FALSE, filename = NULL, model_names = NULL, show_nimp = FALSE, R2_change = FALSE, notes = list(NULL), apa_style = TRUE, stars = std_stars_pad, ...) {
.check_req_packages(c("modelsummary", "gt", "htmltools", "readr"))
if(is.data.frame(coef_renames)) {
assert_names(names(coef_renames), must.include = c("old", "new"))
coef_renames <- coef_renames$new %>% magrittr::set_names(coef_renames$old)
}
if ((class(mod)[1] == "list" | class(std_mod)[1] == "list") & !(length(mod) == length(std_mod))) {
stop("Same number of models need to be included in mod and std_mod arguments")
}
if (!is.null(model_names) & !length(model_names) == length(mod)) {
stop("Length of model names needs to be the same as length of model")
}
if (R2_change == TRUE & !length(mod) == 2) {
stop("R2 change can only be included in tables with exactly two pairs of models")
}
if (!("list" %in% class(mod))) mod <- list(mod)
if (!("list" %in% class(std_mod))) std_mod <- list(std_mod)
gof_map <- tibble::tribble(
~raw, ~clean, ~fmt, ~omit,
"nobs", "*N*", "%.0f", FALSE,
"r.squared", "R<sup>2</sup>", "%.3f", FALSE,
"adj.r.squared", "Adj.R<sup>2</sup>", "%.3f", FALSE,
"AIC", "AIC", "%.1f", TRUE,
"BIC", "BIC", "%.1f", TRUE,
"logLik", "Log.Lik.", "%.3f", TRUE,
"deviance", "Deviance", "%.2f", TRUE,
"df.residual", "DF Resid", "%.0f", TRUE,
"df.null", "DF Null", "%.0f", TRUE,
"sigma", "Sigma", "%.3f", TRUE,
"statistic", "Statistics", "%.3f", TRUE,
"p.value", "p", "%.3f", TRUE,
"df", "DF", "%.0f", TRUE,
"null.deviance", "Deviance Null", "%.2f", TRUE,
"nimp", "No of Imputations", "%.0f", TRUE,
)
if (show_nimp) gof_map[nrow(gof_map), ncol(gof_map)] <- FALSE
extract_gof <- getFromNamespace("extract_gof", "modelsummary")
gof <- purrr::map(mod, extract_gof, fmt, gof_map)
gof_map$omit <- TRUE
SEs <- list()
CIs <- list()
mods <- list()
mod_tidy <- list()
std_mod_tidy <- list()
stat_list <- list()
for (i in seq_len(length(mod))) {
mod_tidy[[i]] <- tidy(mod[[i]])
SEs[[i]] <- paste0("(", sprintf(fmt, mod_tidy[[i]]$std.error), ")")
names(SEs[[i]]) <- mod_tidy[[i]]$term
std_mod_tidy[[i]] <- tidy(std_mod[[i]], conf.int = TRUE, conf.level = conf_level)
CIs[[i]] <- paste0("[", sprintf(fmt, std_mod_tidy[[i]]$conf.low), ", ", sprintf(fmt, std_mod_tidy[[i]]$conf.high), "]")
names(CIs[[i]]) <- std_mod_tidy[[i]]$term
mods[[i * 2 - 1]] <- mod[[i]]
stat_list[[i * 2 - 1]] <- SEs[[i]]
mods[[i * 2]] <- std_mod[[i]]
stat_list[[i * 2]] <- CIs[[i]]
}
names(mods) <- paste0("Model", seq_len(length(mods)))
col_labels <- rep(list(gt::md("*<center>B (SE)</center>*"), gt::md("*<center>&beta; [95% CI]</center>*")), times = length(mod)) %>% stats::setNames(names(mods))
if ("rN_std" %in% class(std_mod[[1]]) | ("mira" %in% class(std_mod[[1]]) & "rN_std" %in% class(std_mod[[1]]$analyses[[1]]))) {
notes %<>% c("Given that dummy variables lose their interpretability when standardised (Fox, 2015), &beta; for dummy variables are semi-standardised, indicating the impact of that dummy on the standardised outcome variable.")
}
notes %<>% c(.make_stars_note())
notes <- Filter(Negate(is.null), notes)
if (statistic_vertical) {
tab <- modelsummary::msummary(mods, output = "gt", vcov = stat_list, rep(c(
"{estimate} {stars}", "{estimate}"), length(mod)), fmt = fmt, gof_omit = ".*", stars = stars, coef_rename = coef_renames, ...) %>%
gt::fmt_markdown(columns = dplyr::everything()) %>%
gt::cols_label(.list = col_labels) %>%
gt::cols_align("right", dplyr::everything()) %>%
gt::cols_align("left", columns = 1) %>%
gt:::dt_source_notes_set("") #Remove std star note
} else {
tab <- modelsummary::msummary(mods, output = "gt", statistic = NULL, estimate = rep(c(
"{estimate} ({std.error}){stars}",
"{estimate} [{conf.low}, {conf.high}]"), length(mod)), fmt = fmt, gof_omit = ".*", stars = stars, coef_rename = coef_renames,...) %>%
gt::fmt_markdown(columns = dplyr::everything()) %>%
gt::cols_label(.list = col_labels) %>%
gt::cols_align("right", dplyr::everything()) %>%
gt::cols_align("left", columns = 1) %>%
gt:::dt_source_notes_set("") #Remove std star note
}
if (apa_style) tab <- tab %>% gt_apa_style()
for (i in seq_along(notes)) {
tab <- tab %>% gt::tab_source_note(gt::md(notes[[i]]))
}
if (length(mod) > 1) {
if (is.null(model_names)) model_names <- paste0("Model", seq_len(length(mod)))
for (i in seq_len(length(mod))) {
tab <- tab %>% gt::tab_spanner(gt::md(paste0("**", model_names[i], "**")), columns = (2 * i):(2 * i + 1))
}
}
code <- character()
row <- '<tr style="border-top-style: solid; border-top-width: 2px;">
<td class="gt_row gt_left" rowspan="1" colspan="1">  <em>N     </td>'
sums <- paste(purrr::map(gof, function(x) {
glue::glue('<td class="gt_row gt_center" rowspan="1" colspan="2"> {x$value[x$term=="*N*"]}   </td>')
}), collapse = " ")
code %<>% paste(row, sums, "</tr>", collapse = "")
row <- '<tr>
<td class="gt_row gt_left" rowspan="1" colspan="1">  <em>R<sup>2</sup>     </td>'
sums <- paste(purrr::map(gof, function(x) {
glue::glue('<td class="gt_row gt_center" rowspan="1" colspan="2"> {fmt_cor(as.numeric(x$value[x$term=="R<sup>2</sup>"]))}   </td>')
}), collapse = " ")
code %<>% paste(row, sums, "</tr>", collapse = "")
Fs <- purrr::map(mod, .lm_F_test)
row <- '<tr>
<td class="gt_row gt_left" rowspan="1" colspan="1"><em>F</em>-tests</td>'
sums <- paste(purrr::map(Fs, function(x) {
glue::glue('<td class="gt_row gt_center" rowspan="1" colspan="2"> {gt:::md_to_html(x)}   </td>')
}), collapse = " ")
code %<>% paste(row, sums, "</tr>", collapse = "")
if (R2_change == TRUE) {
delta_R2 <- purrr::map_chr(gof, function(x) x %>% dplyr::filter(.data$term == "R<sup>2</sup>") %>% dplyr::pull(.data$value)) %>% as.numeric() %>% diff() %>% fmt_cor()
x <- stats::anova(mod[[1]], mod[[2]])
F_test <- glue_warn("<em>F</em>({x$Df[2]}, {x$Res.Df[2]}) = {x$F[2] %>% round_(2)}, <em>p</em> {x$`Pr(>F)`[2] %>% fmt_p()}")
row <- glue_warn('<tr>
<td class="gt_row gt_left" rowspan="1" colspan="1"><em>Change</em></td>
<td class="gt_row gt_center" rowspan="1" colspan="4">&Delta;<em>R</em><sup>2</sup> =
{delta_R2}, {F_test} </td></tr>')
code %<>% paste(row, collapse = "")
}
temp_file <- tempfile()
tab %>%
htmltools::as.tags() %>%
htmltools::save_html(temp_file)
code <- readr::read_file(temp_file) %>% stringr::str_replace("</tbody>", paste(code, "</tbody>"))
code %<>% stringr::str_replace_all(c("\\u03b2" = "&beta;", "â€ " = "&dagger;", "Â " = "&nbsp;"))
out <- list(gt_tab = tab, html_code = code)
class(out) <- c("timesaveR_raw_html", class(out))
if (!is.null(filename)) {
readr::write_file(code, filename)
return(invisible(out))
}
out
}
coef_names <- tibble::tribble(
~old,           ~new,
"(Intercept)",  "(Intercept)",
"agea",         "Age",
"gndr2",        "Gender (??)",
"health",       "Poor health",
"cntryFR",      "Cntryfr",
"cntryGB",      "Cntrygb"
)
report_lm_with_std(mod1, mod2, coef_renames = coef_names)
?ess_health
coef_names <- tibble::tribble(
~old,           ~new,
"(Intercept)",  "(Intercept)",
"agea",         "Age",
"gndr2",        "Gender (female)",
"health",       "Poor health",
"cntryFR",      "France (vs DE)",
"cntryGB",      "UK (vs DE)"
)
report_lm_with_std(mod1, mod2, coef_renames = coef_names)
?report_lm_with_std
coef_names <- tibble::tribble(
~old,           ~new,
"(Intercept)",  "*(Intercept)*",
"agea",         "Age",
"gndr2",        "Gender *(female)*",
"health",       "Poor health",
"cntryFR",      "France *(vs DE)*",
"cntryGB",      "UK *(vs DE)*"
)
report_lm_with_std(mod1, mod2, coef_renames = coef_names)
devtools::load_all(".")
rm(list = c("report_lm_with_std"))
report_lm_with_std(mod1, mod2, coef_renames = coef_names)
glimpse(ess_health)
dplyr::glimpse(ess_health)
mod3 <- lm(depression ~ agea * gndr + eisced + health + cntry, ess_health)
mod4 <- lm_std(depression ~ agea * gndr + eisced + health + cntry, ess_health)
report_lm_with_std(mod = list(mod1, mod3), mod_std = list(mod2, mod4))
devtools::load_all(".")
devtools::load_all(".")
report_lm_with_std(mod = list(mod1, mod3), mod_std = list(mod2, mod4))
coef(mod3)
coef_names <- tibble::tribble(
~old,           ~new,
"(Intercept)",  "*(Intercept)*",
"agea",         "Age",
"gndr2",        "Gender *(female)*",
"health",       "Poor health",
"cntryFR",      "France *(vs DE)*",
"cntryGB",      "UK *(vs DE)*",
"agea:gndr2",   "Age x Female",
)
report_lm_with_std(mod = list(mod1, mod3), mod_std = list(mod2, mod4)), coef_renames = coef_names)
report_lm_with_std(mod = list(mod1, mod3), mod_std = list(mod2, mod4)) coef_renames = coef_names)
report_lm_with_std(mod = list(mod1, mod3), mod_std = list(mod2, mod4), coef_renames = coef_names)
report_lm_with_std(mod = list(mod1, mod3), mod_std = list(mod2, mod4), coef_renames = coef_names, R2_change = TRUE)
ess_health %>% tidyr::drop_na()
mod1 <- lm(depression ~ agea + gndr + health + cntry, tidyr::drop_na(ess_health))
mod2 <- lm_std(depression ~ agea + gndr + health + cntry, tidyr::drop_na(ess_health))
mod3 <- lm(depression ~ agea * gndr + eisced + health + cntry, tidyr::drop_na(ess_health))
mod4 <- lm_std(depression ~ agea * gndr + eisced + health + cntry, tidyr::drop_na(ess_health))
coef_names <- tibble::tribble(
~old,           ~new,
"(Intercept)",  "*(Intercept)*",
"agea",         "Age",
"gndr2",        "Gender *(female)*",
"health",       "Poor health",
"cntryFR",      "France *(vs DE)*",
"cntryGB",      "UK *(vs DE)*",
"eisced",       "Education",
"agea:gndr2",   "Age x Female",
)
report_lm_with_std(mod = list(mod1, mod3), mod_std = list(mod2, mod4), coef_renames = coef_names, R2_change = TRUE)
devtools::load_all(".")
mod1 <- lm(depression ~ agea + gndr + health + cntry, tidyr::drop_na(ess_health))
mod2 <- lm_std(depression ~ agea + gndr + health + cntry, tidyr::drop_na(ess_health))
mod3 <- lm(depression ~ agea * gndr + eisced + health + cntry, tidyr::drop_na(ess_health))
mod4 <- lm_std(depression ~ agea * gndr + eisced + health + cntry, tidyr::drop_na(ess_health))
coef_names <- tibble::tribble(
~old,           ~new,
"(Intercept)",  "*(Intercept)*",
"agea",         "Age",
"gndr2",        "Gender *(female)*",
"health",       "Poor health",
"cntryFR",      "France *(vs DE)*",
"cntryGB",      "UK *(vs DE)*",
"eisced",       "Education",
"agea:gndr2",   "Age x Female",
)
report_lm_with_std(mod = list(mod1, mod3), mod_std = list(mod2, mod4), coef_renames = coef_names, R2_change = TRUE)
